[project]
name = "atlas-atc"
version = "0.1.0"
description = "ATLAS: Air Traffic Learning & Analytics System - Track Prediction Experiment"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
keywords = ["air-traffic-control", "trajectory-prediction", "machine-learning", "aerospace"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "numpy>=1.24.0",
    "pandas>=2.1.0",
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.0.0",
    "asyncpg>=0.29.0",
    "redis>=5.0.1",
    "aiofiles>=23.2.1",
    "psutil>=5.9.0",
    "prometheus-client>=0.19.0",
    "prometheus-fastapi-instrumentator>=6.1.0",
]

[project.optional-dependencies]
ml = [
    "torch>=2.7.0",
    "torchvision>=0.22.0",
    "transformers>=4.35.0",
    "mlflow>=2.10.0",
    "wandb>=0.17.0",
]

frontend = [
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
    "folium>=0.15.0",
    "streamlit-folium>=0.15.0",
]

dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
]

[project.scripts]
atlas-server = "atlas_atc.api.main:main"
atlas-dashboard = "atlas_atc.frontend.dashboard:main"
atlas-train = "atlas_atc.models.train:main"
atlas-evaluate = "atlas_atc.evaluation.benchmark:main"

[tool.uv]
package = true
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/atlas_atc"]

[tool.hatch.build.targets.wheel.sources]
"src" = ""

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py312"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "torch",
    "torch.*",
    "scipy.*",
    "pandas",
    "mlflow",
    "wandb",
    "transformers",
    "transformers.*",
    "pydantic_settings"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=atlas_atc --cov-report=term-missing --cov-report=html"

